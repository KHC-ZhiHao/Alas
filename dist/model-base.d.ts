import Base from './base';
import Model from './model';
import Container from './container';
import ModelUnit from './model-unit';
import ListUnit from './list-unit';
import DictionaryUnit from './dictionary-unit';
import * as Loader from './loader';
declare class ModelBase extends Base {
    Views: any;
    Methods: any;
    BaseUnit: any;
    ListViews: any;
    ListMethods: any;
    DictionaryViews: any;
    DictionaryMethods: any;
    options: any;
    container: Container;
    modelKeys: Array<string>;
    propertyNames: Array<string>;
    readonly id: string;
    readonly name: string;
    constructor(container: Container, name: string, options?: any);
    init(): void;
    initViews(): void;
    initMethods(): void;
    initListViews(): void;
    initListMethods(): void;
    initDictionaryViews(): void;
    initDictionaryMethods(): void;
    initBaseUnit(): void;
    getDefineProperty(name: string, key: string): () => any;
    setDefineProperty(key: string, protect: boolean): (value: any) => void;
    checkBody(): void;
    isUs(model: Model): boolean;
    getViews(unit: any): any;
    getMethods(unit: any): any;
    getLoaders(unit: any): Loader.LoaderCase<any>;
    getBaseUnit(model: any): any;
    create(options: any): ModelUnit;
    createList(options: any): ListUnit<Model>;
    createDictionary(options: any): DictionaryUnit<Model>;
}
export default ModelBase;
